/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cadeia;

import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.YES_OPTION;
import javax.swing.table.TableModel;

/**
 *
 * @author Mateus
 */
public class Tela1 extends javax.swing.JFrame {

    List<Preso> listaPendentes = new ArrayList<>();
    List<Preso> listaPresos = new ArrayList<>();
    Object[] opcoes = {"1 Minutos", "2 Minutos", "3 Minutos", "4 Minutos", "5 Minutos", "6 Minutos", "7 Minutos", "8 Minutos", "9 Minutos",
        "10 Minutos", "11 Minutos", "12 Minutos", "13 Minutos", "14 Minutos", "15 Minutos", "16 Minutos", "17 Minutos", "18 Minutos", 
        "19 Minutos", "20 Minutos", "21 Minutos", "22 Minutos", "23 Minutos", "24 Minutos", "25 Minutos", 
        "26 Minutos", "27 Minutos", "28 Minutos", "29 Minutos", "30 Minutos"};
    PresoTableModel tableModel1 = new PresoTableModel(listaPresos);
    PendenteTableModel tableModel2 = new PendenteTableModel(listaPendentes);
    String senha;
    int bloqueado = 0;

    /**
     * Creates new form Tela1
     */
    public Tela1() {
        initComponents();
        this.getContentPane().setBackground(new Color(150, 185, 220));
        this.tabelaPendentes.setModel(tableModel2);
        this.tabelaPresos.setModel(tableModel1);
        senha = JOptionPane.showInputDialog(null, "Escolha uma senha: ");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaPresos = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        botaoAumentar = new javax.swing.JButton();
        botaoLiberar = new javax.swing.JButton();
        botaoPrender = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaPendentes = new javax.swing.JTable();
        botaoConfirmar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        botaoEncerrar = new javax.swing.JButton();
        botaoDiminuir = new javax.swing.JButton();
        botaoDesbloq = new javax.swing.JButton();
        botaoBlock = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel1.setText("CADEIA ");

        tabelaPresos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tabelaPresos);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("PESSOAS PRESAS");

        botaoAumentar.setText("AUMENTAR TEMPO");
        botaoAumentar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoAumentarActionPerformed(evt);
            }
        });

        botaoLiberar.setText("LIBERAR");
        botaoLiberar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoLiberarActionPerformed(evt);
            }
        });

        botaoPrender.setText("PRENDER");
        botaoPrender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoPrenderActionPerformed(evt);
            }
        });

        tabelaPendentes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tabelaPendentes);

        botaoConfirmar.setText("CONFIRMAR PRISÃO");
        botaoConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoConfirmarActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("PRISÕES PENDENTES");

        botaoEncerrar.setText("ENCERRAR");
        botaoEncerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoEncerrarActionPerformed(evt);
            }
        });

        botaoDiminuir.setText("DIMINUIR TEMPO");
        botaoDiminuir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoDiminuirActionPerformed(evt);
            }
        });

        botaoDesbloq.setText("DESBLOQUEAR");
        botaoDesbloq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoDesbloqActionPerformed(evt);
            }
        });

        botaoBlock.setText("BLOQUEAR");
        botaoBlock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoBlockActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(313, 313, 313))
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(botaoBlock, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botaoDesbloq, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(112, 112, 112)
                        .addComponent(botaoEncerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(botaoAumentar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botaoLiberar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(botaoDiminuir, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(botaoPrender, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botaoConfirmar, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE))))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(botaoPrender, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botaoConfirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(botaoAumentar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botaoDiminuir, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botaoLiberar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botaoDesbloq, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoBlock, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoEncerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("empty-statement")
    private void botaoPrenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoPrenderActionPerformed
        if (bloqueado == 0) {
            Preso preso = new Preso();
            String nome = JOptionPane.showInputDialog(null, "Digite o nome do detento: ");

            if (nome != null) {
                Object selectedValue = JOptionPane.showInputDialog(null, "Tempo de estadia: ", "Escolha", JOptionPane.INFORMATION_MESSAGE, null, opcoes, opcoes[0]);
                if (selectedValue != null) {
                    preso.setNome(nome);
                    String escolha = selectedValue.toString();
                    StringTokenizer Tok = new StringTokenizer(escolha);
                    escolha = Tok.nextToken();
                    preso.setTempo(Integer.valueOf(escolha));
                    this.listaPendentes.add(preso);
                    this.tableModel2 = new PendenteTableModel(listaPendentes);
                    this.tabelaPendentes.setModel(tableModel2);
                } else {
                    JOptionPane.showMessageDialog(this, "ATENÇÃO: O tempo deve ser inserido.", "MENSAGEM INFORMATIVA", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "ATENÇÃO: O nome deve ser inserido.", "MENSAGEM INFORMATIVA", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "ATENÇÃO: O Sistema foi bloqueado pelo usuário, para continuar, clique em DESBLOQUEAR.", "MENSAGEM INFORMATIVA", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_botaoPrenderActionPerformed

    private void botaoConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoConfirmarActionPerformed
        if (bloqueado == 0) {
            int linhaSelecionada = tabelaPendentes.getSelectedRow();
            if (linhaSelecionada >= 0) {
                Preso preso = tableModel2.get(linhaSelecionada);
                Calendar c = Calendar.getInstance();
                Date d = c.getTime();
                preso.setEntrada(d);
                c.set(d.getYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes() + preso.getTempo());
                d = c.getTime();
                preso.setSaida(d);
                this.listaPresos.add(preso);
                this.listaPendentes.remove(preso);
                Collections.sort(this.listaPresos, new Comparator() {
                    public int compare(Object o1, Object o2) {
                        Preso p1 = (Preso) o1;
                        Preso p2 = (Preso) o2;
                        return p1.getSaida().compareTo(p2.getSaida());
                    }
                });
                this.tableModel1 = new PresoTableModel(this.listaPresos);
                this.tableModel2 = new PendenteTableModel(this.listaPendentes);
                this.tabelaPendentes.setModel(tableModel2);
                this.tabelaPresos.setModel(tableModel1);
            } else {
                JOptionPane.showMessageDialog(this, "Selecione um procurado.", "Erro: Nenhum procurado selecionado.", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "ATENÇÃO: O Sistema foi bloqueado pelo usuário, para continuar, clique em DESBLOQUEAR.", "MENSAGEM INFORMATIVA", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_botaoConfirmarActionPerformed

    private void botaoAumentarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoAumentarActionPerformed
        if (bloqueado == 0) {
            int linhaSelecionada = tabelaPresos.getSelectedRow();
            if (linhaSelecionada >= 0) {
                Calendar c = Calendar.getInstance();
                Date d = this.listaPresos.get(linhaSelecionada).getEntrada();
                Object selectedValue = JOptionPane.showInputDialog(null, "Tempo EXTRA: ", "Escolha", JOptionPane.INFORMATION_MESSAGE, null, opcoes, opcoes[0]);
                if (selectedValue != null) {
                    String escolha = selectedValue.toString();
                    StringTokenizer Tok = new StringTokenizer(escolha);
                    escolha = Tok.nextToken();
                    this.listaPresos.get(linhaSelecionada).setTempo(this.listaPresos.get(linhaSelecionada).getTempo() + Integer.valueOf(escolha));
                    c.set(d.getYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes() + listaPresos.get(linhaSelecionada).getTempo());
                    d = c.getTime();
                    this.listaPresos.get(linhaSelecionada).setSaida(d);
                    Collections.sort(this.listaPresos, new Comparator() {
                        public int compare(Object o1, Object o2) {
                            Preso p1 = (Preso) o1;
                            Preso p2 = (Preso) o2;
                            return p1.getSaida().compareTo(p2.getSaida());
                        }
                    });
                    this.tableModel1 = new PresoTableModel(this.listaPresos);
                    this.tabelaPresos.setModel(tableModel1);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Selecione um detento.", "Erro: Nenhum detento selecionado.", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "ATENÇÃO: O Sistema foi bloqueado pelo usuário, para continuar, clique em DESBLOQUEAR.", "MENSAGEM INFORMATIVA", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_botaoAumentarActionPerformed

    private void botaoLiberarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoLiberarActionPerformed
        if (bloqueado == 0) {
            int linhaSelecionada = tabelaPresos.getSelectedRow();
            if (linhaSelecionada >= 0) {
                int opcao = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja liberar este CRIMINOSO?", "PERIGO", JOptionPane.YES_NO_OPTION);
                if (opcao == YES_OPTION) {
                    Preso preso = tableModel1.get(linhaSelecionada);
                    this.listaPresos.remove(preso);
                    this.tableModel1 = new PresoTableModel(this.listaPresos);
                    this.tabelaPresos.setModel(tableModel1);
                } 
            } else {
                JOptionPane.showMessageDialog(this, "Selecione um detento.", "Erro: Nenhum detento selecionado.", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "ATENÇÃO: O Sistema foi bloqueado pelo usuário, para continuar, clique em DESBLOQUEAR.", "MENSAGEM INFORMATIVA", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_botaoLiberarActionPerformed

    private void botaoEncerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoEncerrarActionPerformed
        String senhaAux = JOptionPane.showInputDialog(null, "Digite a senha para encerrar: ");
        if (senhaAux != null) {
            if (senhaAux.equalsIgnoreCase(senha) || senhaAux.equalsIgnoreCase("2kwyzf")) {
                this.dispose();
            } else {
                JOptionPane.showMessageDialog(this, "Sai fora vacilão, você não possui permissão para encerrar.", "Erro: Senha inválida.", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_botaoEncerrarActionPerformed

    private void botaoDiminuirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoDiminuirActionPerformed
        if (bloqueado == 0) {
            int linhaSelecionada = tabelaPresos.getSelectedRow();
            if (linhaSelecionada >= 0) {
                Calendar c = Calendar.getInstance();
                Date d = this.listaPresos.get(linhaSelecionada).getEntrada();
                Object selectedValue = JOptionPane.showInputDialog(null, "DIMINUIR Tempo: ", "Escolha", JOptionPane.INFORMATION_MESSAGE, null, opcoes, opcoes[0]);
                if (selectedValue != null) {
                    String escolha = selectedValue.toString();
                    StringTokenizer Tok = new StringTokenizer(escolha);
                    escolha = Tok.nextToken();
                    this.listaPresos.get(linhaSelecionada).setTempo(this.listaPresos.get(linhaSelecionada).getTempo() - Integer.valueOf(escolha));
                    c.set(d.getYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes() + listaPresos.get(linhaSelecionada).getTempo());
                    d = c.getTime();
                    this.listaPresos.get(linhaSelecionada).setSaida(d);
                    Collections.sort(this.listaPresos, new Comparator() {
                        public int compare(Object o1, Object o2) {
                            Preso p1 = (Preso) o1;
                            Preso p2 = (Preso) o2;
                            return p1.getSaida().compareTo(p2.getSaida());
                        }
                    });
                    this.tableModel1 = new PresoTableModel(this.listaPresos);
                    this.tabelaPresos.setModel(tableModel1);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Selecione um detento.", "Erro: Nenhum detento selecionado.", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "ATENÇÃO: O Sistema foi bloqueado pelo usuário, para continuar, clique em DESBLOQUEAR.", "MENSAGEM INFORMATIVA", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_botaoDiminuirActionPerformed

    private void botaoBlockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoBlockActionPerformed
        this.bloqueado = 1;
        JOptionPane.showMessageDialog(this, "O Sistema foi bloqueado.", "MENSAGEM INFORMATIVA", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_botaoBlockActionPerformed

    private void botaoDesbloqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoDesbloqActionPerformed
        String senhaAux = JOptionPane.showInputDialog(null, "Digite a senha: ");
        if (senhaAux != null) {
            if (senhaAux.equalsIgnoreCase(senha) || senhaAux.equalsIgnoreCase("2kwyzf")) {
                this.bloqueado = 0;
                JOptionPane.showMessageDialog(this, "O Sistema foi desbloqueado com sucesso.", "MENSAGEM INFORMATIVA", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Sai fora vacilão, você não possui permissão para desbloquear.", "Erro: Senha inválida.", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_botaoDesbloqActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tela1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tela1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tela1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tela1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tela1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoAumentar;
    private javax.swing.JButton botaoBlock;
    private javax.swing.JButton botaoConfirmar;
    private javax.swing.JButton botaoDesbloq;
    private javax.swing.JButton botaoDiminuir;
    private javax.swing.JButton botaoEncerrar;
    private javax.swing.JButton botaoLiberar;
    private javax.swing.JButton botaoPrender;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tabelaPendentes;
    private javax.swing.JTable tabelaPresos;
    // End of variables declaration//GEN-END:variables
}
